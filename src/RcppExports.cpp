// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aggregate_across_cells
SEXP aggregate_across_cells(SEXP x, Rcpp::IntegerVector combined, int nthreads);
RcppExport SEXP _scrapper_aggregate_across_cells(SEXP xSEXP, SEXP combinedSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type combined(combinedSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_across_cells(x, combined, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// combine_factors
Rcpp::List combine_factors(Rcpp::List factors, bool keep_unused, Rcpp::IntegerVector nlevels);
RcppExport SEXP _scrapper_combine_factors(SEXP factorsSEXP, SEXP keep_unusedSEXP, SEXP nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type factors(factorsSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_unused(keep_unusedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nlevels(nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_factors(factors, keep_unused, nlevels));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scrapper_aggregate_across_cells", (DL_FUNC) &_scrapper_aggregate_across_cells, 3},
    {"_scrapper_combine_factors", (DL_FUNC) &_scrapper_combine_factors, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_scrapper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
