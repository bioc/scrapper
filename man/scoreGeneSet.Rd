% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scoreGeneSet.R
\name{scoreGeneSet}
\alias{scoreGeneSet}
\title{Score gene set activity for each cell}
\usage{
scoreGeneSet(
  x,
  set,
  rank = 1,
  scale = FALSE,
  block = NULL,
  block.weight.policy = c("variable", "equal", "none"),
  variable.block.weight = c(0, 1000),
  extra.work = 7,
  iterations = 1000,
  seed = 5489,
  realized = TRUE,
  num.threads = 1
)
}
\arguments{
\item{x}{A matrix-like object where rows correspond to genes or genomic features and columns correspond to cells.
Typically, the matrix is expected to contain log-expression values.}

\item{set}{Integer, logical or character vector specifying the rows that belong to the gene set.}

\item{rank}{Integer scalar specifying the rank of the approximation.}

\item{scale}{Logical scalar indicating whether to scale all genes to have the same variance.}

\item{block}{Factor specifying the block of origin (e.g., batch, sample) for each cell in \code{x}.
Alternatively \code{NULL} if all cells are from the same block.}

\item{block.weight.policy}{String specifying the policy to use for weighting different blocks when computing the average for each statistic.
Only used if \code{block} is not \code{NULL}.}

\item{variable.block.weight}{Numeric vector of length 2, specifying the parameters for variable block weighting.
The first and second values are used as the lower and upper bounds, respectively, for the variable weight calculation.
Only used if \code{block} is not \code{NULL} and \code{block.weight.policy = "variable"}.}

\item{extra.work}{Integer scalar specifying the extra dimensions for the IRLBA workspace.}

\item{iterations}{Integer scalar specifying the maximum number of restart iterations for IRLBA.}

\item{seed}{Integer scalar specifying the seed for the initial random vector in IRLBA.}

\item{realized}{Logical scalar indicating whether to realize \code{x} into an optimal memory layout for IRLBA.
This speeds up computation at the cost of increased memory usage.}

\item{num.threads}{Number of threads to use.}
}
\value{
List containing \code{scores}, a numeric vector of per-cell scores for each column in \code{x};
and \code{weights}, a numeric vector of per-gene weights for each gene in \code{set}.
}
\description{
Compute per-cell scores for a gene set, defined as the column sums of a rank-1 approximation to the submatrix for the gene set.
This uses the same approach implemented in the \pkg{GSDecon} package by Jason Hackney.
}
\examples{
library(Matrix)
x <- round(abs(rsparsematrix(1000, 100, 0.1) * 100))
normed <- normalizeCounts(x, size.factors=centerSizeFactors(colSums(x)))
scoreGeneSet(normed, set=c(1,3,5,10,20,100))

}
\seealso{
\url{https://libscran.github.io/gsdecon/}, for more details on the underlying algorithm.
In particular, the documentation for the \code{compute_blocked} function explains the blocking strategy.
}
\author{
Aaron Lun
}
